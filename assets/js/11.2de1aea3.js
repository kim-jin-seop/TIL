(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{414:function(s,a,t){"use strict";t.r(a);var n=t(56),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[s._v("#")]),s._v(" Join")]),s._v(" "),t("h1",{attrs:{id:"join-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#join-2"}},[s._v("#")]),s._v(" Join")]),s._v(" "),t("p",[s._v("조인은 두개의 테이블을 묶어주는 방법이다. FK를 사용하여 조인을 수행한다."),t("br"),s._v("\n많은 데이터들을 분리하여 테이블에 넣어두기 때문에 그 데이터들을 묶어서 사용하기 위해 Join을 수행한다.")]),s._v(" "),t("h2",{attrs:{id:"join-종류"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#join-종류"}},[s._v("#")]),s._v(" JOIN 종류")]),s._v(" "),t("ul",[t("li",[s._v("INNER JOIN")]),s._v(" "),t("li",[s._v("OUTER JOIN")]),s._v(" "),t("li",[s._v("CROSS JOIN")]),s._v(" "),t("li",[s._v("SELF JOIN")])]),s._v(" "),t("h2",{attrs:{id:"inner-join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inner-join"}},[s._v("#")]),s._v(" INNER JOIN")]),s._v(" "),t("p",[s._v("이너 조인은 테이블의 교집합으로 수행하는 조인이다.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\nA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("NAME"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_NAME\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" MEMBER A\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" LOCKER B "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_ID "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_ID\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("MEMBER 테이블과 LOCKER 테이블을 묶어주는 JOIN이며 INNER JOIN의 특징은 교집합으로 처리한다. 즉 현재 FK가 LOCKER의 ID값인데, MEMBER에 LOCKER_ID값이 있는 값이 나오게 된다.(LOCKER_ID가 null인 MEMBER -> LOCKER이 없는 MEMBER)")]),s._v(" "),t("h2",{attrs:{id:"outer-join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#outer-join"}},[s._v("#")]),s._v(" OUTER JOIN")]),s._v(" "),t("h3",{attrs:{id:"left-outer-join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#left-outer-join"}},[s._v("#")]),s._v(" LEFT OUTER JOIN")]),s._v(" "),t("p",[s._v("조인을 해줄 때 왼쪽 기준의 테이블의 값들을 가져오는 조인이다. 조인을 할 때 왼쪽에 있는 테이블에 있는 값은 모두 가져온다.(FK가 null이어도 가져온다.)")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\nA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("NAME"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_NAME\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" MEMBER A\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEFT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OUTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" LOCKER B "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_ID "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_ID\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("이렇게 구현될 경우 만약 MEMBER에서 LOCKER_ID값이 없더라도 데이터로 추가된다.")]),s._v(" "),t("h3",{attrs:{id:"right-outer-join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#right-outer-join"}},[s._v("#")]),s._v(" RIGHT OUTER JOIN")]),s._v(" "),t("p",[s._v("조인을 해줄 때 오른쪽을 기준으로 테이블의 값들을 가져오는 조인이다. 왼쪽과 반대된다.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\nA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("NAME"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_NAME\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" MEMBER A\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RIGHT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OUTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" LOCKER B "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_ID "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_ID\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("LEFT와 반대로 RIGHT인 LOCKER에 대한 정보를 포함하여 모두 가져오게 된다.")]),s._v(" "),t("h3",{attrs:{id:"full-outer-join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#full-outer-join"}},[s._v("#")]),s._v(" FULL OUTER JOIN")]),s._v(" "),t("p",[s._v("조인을 해줄때 왼쪽과 오른쪽을 모두 가져오는 합집합의 역할을 수행하는 조인이다.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\nA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("NAME"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_NAME\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" MEMBER A\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OUTER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" LOCKER B "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_ID "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_ID\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"cross-join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cross-join"}},[s._v("#")]),s._v(" CROSS JOIN")]),s._v(" "),t("p",[s._v("교차로 수행되는 조인이다. A테이블에 튜플이 3개, B 테이블에 튜플이 4개라면, 각각을 모두 매핑해서 JOIN해준다. 즉 12개의 튜플이 나오게 된다.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\nA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("NAME"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LOCKER_NAME\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" MEMBER A\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CROSS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" LOCKER B\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"self-join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#self-join"}},[s._v("#")]),s._v(" SELF JOIN")]),s._v(" "),t("p",[s._v("스스로를 조인하는 것으로 하나의 테이블에서 조인을 수행한다. 이때 서로를 구분할 수 있도록 반드시 별칭을 사용해야한다.")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\nA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("NAME"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("POSITION\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" MEMBER A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" MEMBER B\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);
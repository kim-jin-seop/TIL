(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{419:function(s,n,a){"use strict";a.r(n);var e=a(56),r=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"jpa-양방향-연관관계"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jpa-양방향-연관관계"}},[s._v("#")]),s._v(" JPA 양방향 연관관계")]),s._v(" "),a("p",[s._v("양방향 연관관계는 객체를 양 방향으로 연결해주는 것을 의미한다. 사용을 하는 이유는 한 쪽에서는 수정과 삭제가 가능하다면, 다른 한쪽에서는 단순히 참조만 하기 위해서 사용된다.")]),s._v(" "),a("p",[s._v("Order 와 Member는 Order가 n Member가 1인 연관관계를 갖는다."),a("br"),s._v("\n이때 JPA에서는 양방향으로 연관시켜주기 위해 객체로 각 정보를 갖게 된다.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Member  Class\n@Entity\npublic class Member {\n\t@Id\n    @GeneratedValue()\n    @Column(name = "MEMBER_ID")\n    private Long id;\n\n\t@OneToMany(mappedBy = "member")\n    private List<Order> orders = new ArrayList<>();\n}\n\n//Order Class\n@Entity\npublic class Order {\n\t@Id @GeneratedValue\n    @Column(name ="ORDER_ID")\n    private Long id;\n\n\t@ManyToOne\n    @JoinColumn(name = "MEMBER_ID")\n    private Member member;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("Member가 1의 연관관계이므로 @OneToMany로 Order는 @ManyToOne이 된다."),a("br"),s._v("\n이렇게 구현을 하여도 DB의 테이블에는 전혀 변화가 없다. 즉 Many쪽인 Order에 외래키가 존재한다.")]),s._v(" "),a("h4",{attrs:{id:"연관관계-주인"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#연관관계-주인"}},[s._v("#")]),s._v(" 연관관계 주인")]),s._v(" "),a("p",[s._v("양방향으로 연관관계를 구현하면, Member에서 변경되는 정보를 DB에 넣어줄지 Order에서 변경되는 정보를 DB에 넣어줄지가 애매하게 된다. 그 정보는 mappedBy를 사용해서 나타내게 된다. mappedBy를 가지고 있는 객체는 단순히 조회만 가능하다. 변경을 하게 되어도  DB에 영향을 끼치지 않는다.")]),s._v(" "),a("p",[s._v("연관관계의 주인은 되도록 외래키를 보유한 곳이 하는 것이 좋다.(성능적인 면이나 코드를 이해하는 부분에서)")]),s._v(" "),a("h4",{attrs:{id:"연관관계-편의-메소드"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#연관관계-편의-메소드"}},[s._v("#")]),s._v(" 연관관계 편의 메소드")]),s._v(" "),a("p",[s._v("연관관계 편의 메소드는 연관관계의 주인이 아닌 부분에서 데이터를 변경하거나 할 때 적용을 할 수 있도록 해주는 메소드이다. 혹은 로직을 처리함에 있어, 값이 변경되어야하는 경우 사용한다. 연관관계 편의 메소드를 양 방향에서 동시에 사용할 경우 무한루프에 빠질 수 있으므로 되도록 한곳에서 구현해주어야한다.")]),s._v(" "),a("h4",{attrs:{id:"주의-사항"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#주의-사항"}},[s._v("#")]),s._v(" 주의 사항")]),s._v(" "),a("p",[s._v("연관관계의 주인을 변경해야만 변경된다는 점을 알고 있어야한다."),a("br"),s._v("\n단방향으로 연결을 하고 양방향 연결은 추후 필요하다고 판단되면 하도록 하자.")])])}),[],!1,null,null,null);n.default=r.exports}}]);